name: Validating PR Title

on:
  pull_request_target:
    types:
      - opened
      - edited

permissions: write-all

jobs:
  get_pr_title:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Validate the PR title
        shell: pwsh
        run: |
          $prTitle = "${{ github.event.pull_request.title }}"
          $Pattern = "^AB#(\d+)"
          Write-Output "PR Title: $prTitle"
          if ($prTitle -match $Pattern) {
              $workItemId = $matches[1]
              echo "WORK_ITEM_ID=$workItemId" >> $env:GITHUB_ENV
              }
          else {
              $errorMessage = "Pull Request title validation failed. The Pull Request title must begin with ""AB#<work-item-number>"" to link this Pull request with a work item. `
                Example: To link with work item 12345, start the Pull Request title with AB#12345. `
                Please make this change to trigger this validator workflow again."
              Write-Error $errorMessage
              exit 1
          }
      - name: Check previous comment of work item link
        shell: pwsh
        run: |
          $prNumber = "${{ github.event.pull_request.number }}"
          $workItemId = ${env:WORK_ITEM_ID}
          $prDataJson = (gh issue view $prNumber -c --json comments)
          $prDatajq = (gh issue view $prNumber -c --json comments --jq '(.comments[] | select(.author.login == "github-actions" and contains(.body, "code: lcc-200")) | sort_by(.createdAt))[-1].url')
          $prDatajq
          $prData = $prDataJson | ConvertFrom-Json
          $prData.comments = $prData.comments | Sort-Object -Property createdAt -Descending
          $commentAlreadyThere = $false
          foreach ($comment in $prData.comments) {
              if ($comment.author.login -eq "github-actions") {
                  # Checking if the previous comments has work item link
                  if ( $comment.body -match "code: lcc-200" ) {
                      $commentId= ([regex]::Match($comment.url, "issuecomment-(\d+)")).Groups[1].Value
                      echo "COMMENT_BODY=$comment.body" >> $env:GITHUB_ENV
                      echo "COMMENT_ID=$commentId" >> $env:GITHUB_ENV
                      $commentAlreadyThere = $true
                      break 
                  }
                  }
              }
          echo "WORK_LINK_COMMENT=$commentAlreadyThere" >> $env:GITHUB_ENV
          #If there is no previous comments present in the workflow
          if ( -not($commentAlreadyThere)) {
              $response = (gh pr comment $prNumber --body " ADO Work Item link AB#${env:WORK_ITEM_ID}. <!-- code: lcc-200 -->")
              $commentId= ([regex]::Match($response, "issuecomment-(\d+)")).Groups[1].Value
              echo "COMMENT_ID=$commentId" >> $env:GITHUB_ENV      
          }  
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  

      - name: Check if the work item in the comment is different from PR
        if: env.COMMENT_BODY
        shell: pwsh
        run: |
          $prNumber = "${{ github.event.pull_request.number }}"
          if (${env:COMMENT_BODY} -notmatch "AB#${env:WORK_ITEM_ID}"){
              $headers = @{
                  "Accept" = "application/vnd.github+json"
                  "Authorization" = "Bearer ${{ secrets.GITHUB_TOKEN }}"
                  "X-GitHub-Api-Version" = "2022-11-28"
                  "Content-Type" = "application/json"
              }
              $repoName = "${{ github.repository }}"
              $url = "https://api.github.com/repos/$repoName/issues/comments/$(${env:COMMENT_ID})"
              $body = @{
                  "body" = " ADO Work Item link AB#${env:WORK_ITEM_ID}. <!-- code: lcc-200 -->"
              }
              $jsonBody = $body | ConvertTo-Json
              $response = Invoke-RestMethod -Uri $url -Headers $headers -Body $jsonBody -Method Patch
              Write-Output "The work item in the PR title is changed to AB#${env:WORK_ITEM_ID}"
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
      - name: Check for the comment added or edited contains the valid work item
        shell: pwsh
        run: |
          # Adding the wait for 10 seconds for creating the link to work items
          Start-Sleep -Seconds 10
          $prNumber = "${{ github.event.pull_request.number }}"
          $headers = @{
                  "Accept" = "application/vnd.github+json"
                  "Authorization" = "Bearer ${{ secrets.GITHUB_TOKEN }}"
                  "X-GitHub-Api-Version" = "2022-11-28"
                  "Content-Type" = "application/json"
              }
          $repoName = "${{ github.repository }}"
          $url = "https://api.github.com/repos/$repoName/issues/comments/$(${env:COMMENT_ID})"
          $response = Invoke-RestMethod -Uri $url -Headers $headers
          if ($response.body -match "/_workitems/edit/${env:WORK_ITEM_ID}") {
            Write-Output "The Work Item in the comment is a valid work item"
            }
          else{
              Invoke-RestMethod -Uri $url -Headers $headers -Method Delete     
              Write-Error "The work item in the PR Title is not valid, deleting the work link comment"
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
          
